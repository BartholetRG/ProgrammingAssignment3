# drop Date and ID columns from each data frame
filedata_above_threshold <- lapply(filedata_above_threshold, subset, select=c(sulfate,nitrate))
# correlate the nitrate and sulfate values for each monitor
correlation_list <- lapply(filedata_above_threshold, cor, use="complete.obs")
# strip the data frames to just the correlation value
correlation_list <- lapply(correlation_list, subset, select=sulfate)
correlation_list
}
}
corr("specdata", 400)
=
corr <- function(directory, threshold = 0) {
# create a list of files
files_list <- list.files(directory, full.names=TRUE)
# build a list where each element is a dataframe corresponding to the locations of interest (id)
list_of_filedata<-lapply(files_list, read.csv)
# iterate over the list of dataframes and build vector of complete cases for each dataframe
complete_cases_list<-lapply(list_of_filedata, complete.cases)
# count the number of complete cases in each vector
counts<-lapply(complete_cases_list, sum)
# convert the list of lists into a vector
nobs<-c(do.call("cbind",counts))
# convert nobs into a logical vector with comparison to threshold
met_threshold <- nobs>threshold
# count how many monitors met the threshold
count_met_theshold <- sum(met_threshold)
if (count_met_theshold ==0) { # if no monitors met the threshold, return an empty numeric vector
vec <- vector(mode="numeric")
}
else { # there is at least one monitor that met the threshold
# filter list to only those dataframes that met threshold
filedata_above_threshold <- list_of_filedata[met_threshold]
# drop Date and ID columns from each data frame
filedata_above_threshold <- lapply(filedata_above_threshold, subset, select=c(sulfate,nitrate))
# correlate the nitrate and sulfate values for each monitor
correlation_list <- lapply(filedata_above_threshold, cor, use="complete.obs")
# strip the data frames to just the correlation value
correlation_list <- lapply(correlation_list, subset, select=sulfate)
correlation_list <- lapply(correlation_list, subset, subset=c(FALSE, TRUE))
correlation_list
}
}
corr("specdata", 400)
corr <- function(directory, threshold = 0) {
# create a list of files
files_list <- list.files(directory, full.names=TRUE)
# build a list where each element is a dataframe corresponding to the locations of interest (id)
list_of_filedata<-lapply(files_list, read.csv)
# iterate over the list of dataframes and build vector of complete cases for each dataframe
complete_cases_list<-lapply(list_of_filedata, complete.cases)
# count the number of complete cases in each vector
counts<-lapply(complete_cases_list, sum)
# convert the list of lists into a vector
nobs<-c(do.call("cbind",counts))
# convert nobs into a logical vector with comparison to threshold
met_threshold <- nobs>threshold
# count how many monitors met the threshold
count_met_theshold <- sum(met_threshold)
if (count_met_theshold ==0) { # if no monitors met the threshold, return an empty numeric vector
vec <- vector(mode="numeric")
}
else { # there is at least one monitor that met the threshold
# filter list to only those dataframes that met threshold
filedata_above_threshold <- list_of_filedata[met_threshold]
# drop Date and ID columns from each data frame
filedata_above_threshold <- lapply(filedata_above_threshold, subset, select=c(sulfate,nitrate))
# correlate the nitrate and sulfate values for each monitor
correlation_list <- lapply(filedata_above_threshold, cor, use="complete.obs")
# result is a 2x2 matrix with the value I need in 1:2 or 2:1
# strip the data frames to just the correlation value
# first select only the sulfate column
correlation_list <- lapply(correlation_list, subset, select=sulfate)
# then select only the second row
correlation_list <- lapply(correlation_list, subset, subset=c(FALSE, TRUE))
# now create a single vector of correlations
correlation_list <- c(do.call("cbind",correlation_list))
correlation_list
}
}
corr("specdata", 400)
corr <- function(directory, threshold = 0) {
# create a list of files
files_list <- list.files(directory, full.names=TRUE)
# build a list where each element is a dataframe corresponding to the locations of interest (id)
list_of_filedata<-lapply(files_list, read.csv)
# iterate over the list of dataframes and build vector of complete cases for each dataframe
complete_cases_list<-lapply(list_of_filedata, complete.cases)
# count the number of complete cases in each vector
counts<-lapply(complete_cases_list, sum)
# convert the list of lists into a vector
nobs<-c(do.call("cbind",counts))
# convert nobs into a logical vector with comparison to threshold
met_threshold <- nobs>threshold
# count how many monitors met the threshold
count_met_theshold <- sum(met_threshold)
if (count_met_theshold ==0) { # if no monitors met the threshold, return an empty numeric vector
vec <- vector(mode="numeric")
}
else { # there is at least one monitor that met the threshold
# filter list to only those dataframes that met threshold
filedata_above_threshold <- list_of_filedata[met_threshold]
# drop Date and ID columns from each data frame
filedata_above_threshold <- lapply(filedata_above_threshold, subset, select=c(sulfate,nitrate))
# correlate the nitrate and sulfate values for each monitor
correlation_list <- lapply(filedata_above_threshold, cor, use="complete.obs")
# result is a 2x2 matrix with the value I need in 1:2 or 2:1
# strip the data frames to just the correlation value
# first select only the sulfate column
correlation_list <- lapply(correlation_list, subset, select=sulfate)
# then select only the second row
correlation_list <- lapply(correlation_list, subset, subset=c(FALSE, TRUE))
# now create a single vector of correlations
correlation_list <- c(do.call("cbind",correlation_list))
}
}
corr("specdata", 400)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("submitscript1.R")
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
# create a list of files
files_list <- list.files(directory, full.names=TRUE)
# build a list where each element is a dataframe corresponding to the locations of interest (id)
list_of_filedata<-lapply(files_list, read.csv)
# iterate over the list of dataframes and build vector of complete cases for each dataframe
complete_cases_list<-lapply(list_of_filedata, complete.cases)
# count the number of complete cases in each vector
counts<-lapply(complete_cases_list, sum)
# convert the list of lists into a vector
nobs<-c(do.call("cbind",counts))
# convert nsource("corr.R")obs into a logical vector with comparison to threshold
met_threshold <- nobs>threshold
# count how many monitors met the threshold
count_met_theshold <- sum(met_threshold)
if (count_met_theshold ==0) { # if no monitors met the threshold, return an empty numeric vector
vec <- vector(mode="numeric")
}
else { # there is at least one monitor that met the threshold
# filter list to only those dataframes that met threshold
filedata_above_threshold <- list_of_filedata[met_threshold]
# drop Date and ID columns from each data frame
filedata_above_threshold <- lapply(filedata_above_threshold, subset, select=c(sulfate,nitrate))
# correlate the nitrate and sulfate values for each monitor
correlation_list <- lapply(filedata_above_threshold, cor, use="complete.obs")
# result is a 2x2 matrix with the value I need in 1:2 or 2:1
# strip the data frames to just the correlation value
# first select only the sulfate column
correlation_list <- lapply(correlation_list, subset, select=sulfate)
# then select only the second row
correlation_list <- lapply(correlation_list, subset, subset=c(FALSE, TRUE))
# now create a single vector of correlations
correlation_list <- c(do.call("cbind",correlation_list))
}
}
corr("specdata", 400)
source(vector_mean)
source(vector_mean.R)
gwd()
gwd
pwd
pwd()
source("vector_mean")
source("vector_mean.r")
x<-c(1,2,3,4,5)
makeVector(x)
cachemean(x)
makeVector$set(x)
cachemean$set(x)
x$set()
x
x<-makeVector(c(1,2,3,4,5))
x$get()
x$getmean
x$getmean()
cachemean(x)
x$getmean()
x$set(c(3,4,5,6,7))
cachemean(x)
x$set(c(3,4,5,6,7,8))
cachemean(x)
x$m
cachemean(x)
cachemean(x)
cachemean$m
x$getmean()
message("test")
x->message("test")
source('~/DataScience/RProgramming/vector_mean.R')
x<-makeVector(c(1,2,3,4,5))
x$getmean()
cachemean(x)
x$getmean()
x$set(c(3,4,5,6,7,8))
cachemean(x)
x$getmean()
source("cachematrix.R")
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
seq1 <- seq(1:9)
makeCacheMatrix(seq1)
z<-makeCacheMatrix(seq1)
z$get()
z$getinverse()
seq1 <- seq(1:9)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
matrix1$get()
matrix1$getinverse()
matrix1$getinverse()
seq1 <- seq(1:9)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
matrix1<-makeCacheMatrix(z)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matrix1)
cacheSolve(matrix1)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix$get()
matrix1<-makeCacheMatrix(z)
makeCacheMatrix$get()
seq1 <- seq(1:9)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
matrix1<-makeCacheMatrix(z)
makeCacheMatrix$get()
matrix1$get()
matrix1$get()
View(z)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
matrix1$get()
cacheSolve(matrix1)
seq1 <- seq(3:12
)
seq1 <- seq(3:12)
seq1 <- seq(from=3,to=12)
z<-matrix(seq1,3)
seq1 <- seq(from=3,to=11)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
matrix1$get()
cacheSolve(matrix1)
seq1 <- c(4,7,1,2,8,5,9,7,5)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
matrix1$get()
cacheSolve(matrix1)
matrix1$get()
matrix1$getinverse()
matrix1$getinverse()
cacheSolve(matrix1)
cacheSolve(matrix1)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
seq1 <- c(4,7,1,2,8,5,9,7,5)
z<-matrix(seq1,3)
matrix1<-makeCacheMatrix(z)
matrix1$get()
cacheSolve(matrix1)
cacheSolve(matrix1)
matrix1$get()
library(datasets)
data(iris)
?iris
iris
apply(iris, 2, mean)
apply(iris$Sepal.Length, 2, mean)
s<-split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[,Sepal.Length]))
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
x
x$8-x$4
x[,8]-x[,4]
x$4
x.4
x$3
x[,3]-x[,1]
x
x[3]-x[1]
R.version.string
install.packages("swirl")
library(swirl)
ls
library(swirl)
swirl()
5+7
bye
bye
exit
bye()
swirl
swirl()
x<-5+7
info()
x
y<-x-4
y<-x-3
y
bye()
swirl
swirl()
library(swirl)
swirl()
bye()
library(swirl)
swirl()
bye()
library("swirl")
swirl()
z <- c(1.1, 9, 3.14)
?c
z
info()
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
info()
x <- 9
ls()
list.files()
?list.files
?args
args(list.files)
old.dir <- getwd()
?dir.create
dir.create("./testdir")
dir.create(./testdir)
dir.create("testdir")
setwd("testdir")
?file.create
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
play()
nxt()
info()
file.path("mytest3.R")
?file.path
folder1
file.path("folder1", "folder2")
play()
file.path("folder1", "folder2", fsep = .Platform$file.sep)
nxt()
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
play()
file.list()
files.list()
dir()
nxt()
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
library("swirl")
swirl()
play
play()
list.file()
list.files()
nxt()
1:20
pi:10
15:1
play()
?`<<-`
nxt()
?`:`
seq(1, 20)
seq(0, 10, by-0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
play()
?seq
seq(1, along.with=my_seq)
nxt
nxt()
seq(1, along.with=my_seq)
seq_along(my_seq)
play()
seq_along(3, my_seq)
nxt()
rep(0, times = 40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
bye()
library("swirl")
swirl
swirl()
num_vect >= 6
bye()
library("swirl")
swirl()
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Rob")
my_name
paste(my_name, sep = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = "")
paste("Hello", "world!", sep = " ")
bye()
library("swirl")
swirl()
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
list.files()
setwd("./ProgrammingAssignment3/")
getwd
getwd()
list.files()
source("submitscript3.R")
submit()
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
best("MD", "heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
best("MD", "heart attack")
submit()
submit()
submit()
best("NN", "pneumonia")
source('~/DataScience/RProgramming/ProgrammingAssignment3/best.R')
submit()
submit()
submit()
submit()
submit()
getwd()
open("rankall.R")
file.edit("rankall.R")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack")
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
source('~/DataScience/RProgramming/ProgrammingAssignment3/rankall.R')
